// <auto-generated />
using System;
using Infrastructure.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250820210417_SeadedData")]
    partial class SeadedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("Departure")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 1, 9, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Astana",
                            Origin = "Almaty",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 2,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 1, 20, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 1, 18, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Almaty",
                            Origin = "Astana",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 3,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 2, 8, 50, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 2, 7, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Shymkent",
                            Origin = "Almaty",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 4,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 2, 12, 20, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 2, 10, 20, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Aktau",
                            Origin = "Astana",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 5,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 3, 8, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 3, 6, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Astana",
                            Origin = "Atyrau",
                            Status = "Delayed"
                        },
                        new
                        {
                            Id = 6,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 3, 23, 55, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 4, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 3, 22, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Dubai",
                            Origin = "Almaty",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 7,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 4, 14, 25, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 4, 12, 35, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Istanbul",
                            Origin = "Astana",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 8,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 5, 11, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 5, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Frankfurt",
                            Origin = "Almaty",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 9,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 6, 16, 20, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 6, 13, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "London",
                            Origin = "Astana",
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 10,
                            Arrival = new DateTimeOffset(new DateTime(2025, 9, 7, 10, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2025, 9, 7, 1, 20, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Destination = "Seoul",
                            Origin = "Almaty",
                            Status = "InTime"
                        });
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Moderator"
                        },
                        new
                        {
                            Id = 2,
                            Code = "User"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "AQAAAAEAACcQAAAAED4COiUJIz8MY1SzLargwTtdw5arAP+UUhe+8no3XCIg46HmVw4intrViB2Md8KWng==",
                            RoleId = 1,
                            Username = "moderator1"
                        },
                        new
                        {
                            Id = 2,
                            Password = "AQAAAAEAACcQAAAAEFyoYQZZiOBXYt/uP1pKlq5zQLqgC6HF17T4IWzV3LJp/f6y0bdYB0HCZpIzx09Wvg==",
                            RoleId = 2,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Password = "AQAAAAEAACcQAAAAEEp7JWIfuPQY7jh3d38eyqfuKoe3m6Tt0I/jQwOcCcapq/C/2LuL5G2TrhPAKIVGTQ==",
                            RoleId = 2,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
